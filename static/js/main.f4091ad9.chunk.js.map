{"version":3,"sources":["hooks/HW25/Modal.js","hooks/HW25/index.js","serviceWorker.js","index.js"],"names":["Modal","props","header","position","isAnimation","children","onClose","className","cx","myModal","myTop","myAnimation","myAnimation1","data-testid","onClick","lorem","Index","useState","showIndex","setShowIndex","console","log","this","bind","name","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kQAIe,SAASA,EAAMC,GAAQ,IAElCC,EAKED,EALFC,OACAC,EAIEF,EAJFE,SACAC,EAGEH,EAHFG,YACAC,EAEEJ,EAFFI,SACAC,EACEL,EADFK,QAGF,OACE,yBAAKC,UAAU,WACb,yBAAKA,UAAWC,IAAG,WAAY,CAC7BC,QAAsB,WAAbN,EACTO,MAAoB,QAAbP,EACPQ,YAAaP,EACbQ,aAAcR,KAEbF,GACC,4BAAKA,GAEP,yBAAKW,cAAY,WACdR,GAEH,4BACEE,UAAU,4BACVO,QAASR,GAFX,kBCrBR,IAAMS,EAAQ,uNAEC,SAASC,IAAS,IAAD,EACIC,oBAAU,GADd,mBACvBC,EADuB,KACZC,EADY,KAQ9B,OAFAC,QAAQC,IAAIC,MAGV,yBAAKf,UAAU,MACb,4BACEA,UAAU,yBACVO,QAASK,EAAaI,KAAKD,KAAM,IAFnC,SAMe,IAAdJ,GAAmB,kBAAClB,EAAD,CAClBwB,KAAK,QACLrB,SAAS,SACTG,QAASa,EAAaI,KAAKD,MAAO,IAEjCP,GAGH,4BACER,UAAU,yBACVO,QAASK,EAAaI,KAAKD,KAAM,IAFnC,OAMe,IAAdJ,GAAmB,kBAAClB,EAAD,CAClBwB,KAAK,MACLrB,SAAS,MACTG,QAASa,EAAaI,KAAKD,MAAO,IAEjCP,GAGH,4BACER,UAAU,yBACVO,QAASK,EAAaI,KAAKD,KAAM,IAFnC,UAMe,IAAdJ,GAAmB,kBAAClB,EAAD,CAClBwB,KAAK,SACLtB,OAAO,SACPC,SAAS,SACTG,QAASa,EAAaI,KAAKD,MAAO,IAEjCP,GAGH,4BACER,UAAU,yBACVO,QAASK,EAAaI,KAAKD,KAAM,IAFnC,mBAMe,IAAdJ,GAAmB,kBAAClB,EAAD,CAClBwB,KAAK,kBACLpB,aAAa,EACbE,QAASa,EAAaI,KAAKD,MAAO,IAEjCP,IC5DWU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEP,6BACE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.f4091ad9.chunk.js","sourcesContent":["import cx from 'classnames';\r\n\r\nimport React from 'react';\r\n\r\nexport default function Modal(props) {\r\n  const {\r\n    header,\r\n    position,\r\n    isAnimation,\r\n    children,\r\n    onClose\r\n  } = props;\r\n\r\n  return (\r\n    <div className=\"modalBg\">\r\n      <div className={cx(\"allModal\", {\r\n        myModal: position === \"center\",\r\n        myTop: position === \"top\",\r\n        myAnimation: isAnimation,\r\n        myAnimation1: isAnimation,\r\n      })}>\r\n        {header &&\r\n          <h2>{header}</h2>\r\n        }\r\n        <div data-testid=\"content\">\r\n          {children}\r\n        </div>\r\n        <button\r\n          className=\"btn btn-primary btn-block\"\r\n          onClick={onClose}\r\n        >\r\n            關閉\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nimport './style.css';\r\n\r\nimport Modal from './Modal';\r\n\r\nconst lorem = \"Lorem ipsum dolor sit, amet consectetur adipisicing elit. Facilis ut vel, itaque, pariatur porro ad nihil, tempore nostrum enim natus illo aut voluptatibus. Perferendis maxime fuga doloremque magni, quidem error.\";\r\n\r\nexport default function Index() {\r\n  const [showIndex, setShowIndex] = useState(-1);\r\n\r\n  // const handleClick = showIndex => {\r\n  //   setShowIndex(showIndex);\r\n  // };\r\n  console.log(this);\r\n\r\n  return (\r\n    <div className=\"bg\">\r\n      <button\r\n        className=\"btn btn-primary button\"\r\n        onClick={setShowIndex.bind(this, 0)}\r\n      >\r\n          Modal\r\n      </button>\r\n      {showIndex === 0 && <Modal\r\n        name=\"Modal\"\r\n        position=\"center\"\r\n        onClose={setShowIndex.bind(this, -1)}\r\n      >\r\n        {lorem}\r\n      </Modal>}\r\n\r\n      <button\r\n        className=\"btn btn-primary button\"\r\n        onClick={setShowIndex.bind(this, 1)}\r\n      >\r\n          top\r\n      </button>\r\n      {showIndex === 1 && <Modal\r\n        name=\"top\"\r\n        position=\"top\"\r\n        onClose={setShowIndex.bind(this, -1)}\r\n      >\r\n        {lorem}\r\n      </Modal>}\r\n\r\n      <button\r\n        className=\"btn btn-primary button\"\r\n        onClick={setShowIndex.bind(this, 2)}\r\n      >\r\n          header\r\n      </button>\r\n      {showIndex === 2 && <Modal\r\n        name=\"header\"\r\n        header=\"Header\"\r\n        position=\"center\"\r\n        onClose={setShowIndex.bind(this, -1)}\r\n      >\r\n        {lorem}\r\n      </Modal>}\r\n\r\n      <button\r\n        className=\"btn btn-primary button\"\r\n        onClick={setShowIndex.bind(this, 3)}\r\n      >\r\n          top + animation\r\n      </button>\r\n      {showIndex === 3 && <Modal\r\n        name=\"top + animation\"\r\n        isAnimation={true}\r\n        onClose={setShowIndex.bind(this, -1)}\r\n      >\r\n        {lorem}\r\n      </Modal>}\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport HW from './hooks/HW25';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  <div>\r\n    <HW />\r\n  </div>,\r\n  // </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}